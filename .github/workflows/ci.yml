name: ESP32-C6 Build CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  build-esp32c6:
    name: Build ESP32-C6 Examples
    runs-on: ubuntu-latest
    container:
      image: espressif/idf:v5.3

    steps:
      - name: Checkout V4-ports
        uses: actions/checkout@v4
        with:
          path: v4-ports

      # Note: These steps assume v4 and v4-front are available
      # Update the repository paths according to your organization
      - name: Checkout V4
        uses: actions/checkout@v4
        with:
          repository: kirisaki/v4 # TODO: Update this path
          path: v4
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout V4-front
        uses: actions/checkout@v4
        with:
          repository: kirisaki/v4-front # TODO: Update this path
          path: v4-front
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup environment
        run: |
          . $IDF_PATH/export.sh
          echo "ESP-IDF version:"
          idf.py --version

      - name: Build v4-blink
        working-directory: v4-ports/esp32c6/examples/v4-blink
        run: |
          . $IDF_PATH/export.sh
          export V4_PATH=$GITHUB_WORKSPACE/v4
          echo "V4_PATH is set to: $V4_PATH"
          ls -la $V4_PATH/include/v4/ || echo "V4 headers not found"
          idf.py build

      # v4-repl-demo requires v4 and v4-front
      # Uncomment when dependencies are available
      # - name: Build v4-repl-demo
      #   working-directory: v4-ports/esp32c6/examples/v4-repl-demo
      #   run: |
      #     . $IDF_PATH/export.sh
      #     export V4_PATH=$GITHUB_WORKSPACE/v4
      #     export V4_FRONT_PATH=$GITHUB_WORKSPACE/v4-front
      #     idf.py build

      - name: Upload v4-blink artifacts
        uses: actions/upload-artifact@v4
        with:
          name: v4-blink-esp32c6
          path: |
            v4-ports/esp32c6/examples/v4-blink/build/*.bin
            v4-ports/esp32c6/examples/v4-blink/build/*.elf
          retention-days: 7

      # - name: Upload v4-repl-demo artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: v4-repl-demo-esp32c6
      #     path: |
      #       v4-ports/esp32c6/examples/v4-repl-demo/build/*.bin
      #       v4-ports/esp32c6/examples/v4-repl-demo/build/*.elf
      #     retention-days: 7

  lint:
    name: Code Format Check
    runs-on: ubuntu-latest
    container:
      image: espressif/idf:v5.3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check code formatting
        run: |
          cd esp32c6
          # Check if clang-format is available
          if command -v clang-format &> /dev/null; then
            echo "Running clang-format check..."
            find components examples -name '*.c' -o -name '*.h' | \
              xargs clang-format --dry-run --Werror
          else
            echo "clang-format not available, skipping format check"
          fi
